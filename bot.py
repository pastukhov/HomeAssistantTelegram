import os
import logging

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from home_assistant import HomeAssistantAPI

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Initialize Home Assistant API
ha_api = HomeAssistantAPI()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /start is issued."""
    welcome_message = """
üè† *Home Assistant Telegram Bot*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ Home Assistant —á–µ—Ä–µ–∑ Telegram.

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/sensors - –ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤

üí° *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ–º:*
/lights - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤
/light\_on <entity\_id> - –í–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç
/light\_off <entity\_id> - –í—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç

üîå *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—è–º–∏:*
/switches - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π
/switch\_on <entity\_id> - –í–∫–ª—é—á–∏—Ç—å –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å
/switch\_off <entity\_id> - –í—ã–∫–ª—é—á–∏—Ç—å –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å

*–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
`/light_on light.kitchen`
`/switch_off switch.garden_lights`

üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /lights –∏–ª–∏ /switches —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    """
    await update.message.reply_text(welcome_message, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    help_text = """
ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º Home Assistant Bot*

üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:*
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã Home Assistant
/sensors \[–Ω–æ–º–µ—Ä\_—Å—Ç—Ä–∞–Ω–∏—Ü—ã\] - –ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤
/lights \[–Ω–æ–º–µ—Ä\_—Å—Ç—Ä–∞–Ω–∏—Ü—ã\] - –°–ø–∏—Å–æ–∫ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤
/switches \[–Ω–æ–º–µ—Ä\_—Å—Ç—Ä–∞–Ω–∏—Ü—ã\] - –°–ø–∏—Å–æ–∫ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π

üí° *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ–º:*
/light\_on <entity\_id> - –í–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫
/light\_off <entity\_id> - –í—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫

üîå *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—è–º–∏:*
/switch\_on <entity\_id> - –í–∫–ª—é—á–∏—Ç—å –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å
/switch\_off <entity\_id> - –í—ã–∫–ª—é—á–∏—Ç—å –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å

*–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
`/lights` - –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–≤–µ—Ç–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
`/lights 2` - –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
`/light_on light.kitchen` - –≤–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç –Ω–∞ –∫—É—Ö–Ω–µ
`/switch_off switch.garden_lights` - –≤—ã–∫–ª—é—á–∏—Ç—å —Å–∞–¥–æ–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ

üìÑ *–ù–∞–≤–∏–≥–∞—Ü–∏—è:* –í —Å–ø–∏—Å–∫–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫–∏ ‚¨ÖÔ∏è ‚û°Ô∏è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show Home Assistant status."""
    try:
        states = ha_api.get_all_states()
        if states:
            lights_count = len([s for s in states if s.get('entity_id', '').startswith('light.')])
            switches_count = len([s for s in states if s.get('entity_id', '').startswith('switch.')])
            sensors_count = len([s for s in states if s.get('entity_id', '').startswith('sensor.')])
            
            status_message = f"""
üè† *Home Assistant Status*

‚úÖ Connected and operational
üìä Total entities: {len(states)}
üí° Lights: {lights_count}
üîå Switches: {switches_count}
üì° Sensors: {sensors_count}

üïê Last updated: {ha_api.get_current_time()}
            """
        else:
            status_message = "‚ùå Unable to connect to Home Assistant"
        
        await update.message.reply_text(status_message, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Status command error: {e}")
        await update.message.reply_text(f"‚ùå Error getting status: {str(e)}")

async def lights(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """List all lights and their states with pagination."""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        page = 1
        if context.args and context.args[0].isdigit():
            page = max(1, int(context.args[0]))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_msg = await update.message.reply_text("üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–µ—Ç–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö...")
        
        lights_data = ha_api.get_lights()
        if not lights_data:
            await loading_msg.edit_text("üí° –°–≤–µ—Ç–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Home Assistant.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        per_page = 8
        total_pages = (len(lights_data) + per_page - 1) // per_page
        page = min(page, total_pages)  # –ù–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        
        start_idx = (page - 1) * per_page
        end_idx = start_idx + per_page
        page_lights = lights_data[start_idx:end_idx]
        
        message = f"üí° *–°–≤–µ—Ç–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞* (—Å—Ç—Ä. {page}/{total_pages}):\n\n"
        
        for light in page_lights:
            state_emoji = "üü¢" if light['state'] == 'on' else "üî¥"
            if light['state'] == 'unavailable':
                state_emoji = "‚ö´"
            
            friendly_name = light['friendly_name']
            if len(friendly_name) > 25:  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
                friendly_name = friendly_name[:22] + "..."
            
            message += f"{state_emoji} {friendly_name}\n"
            message += f"   `{light['entity_id']}`\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        nav_line = ""
        if page > 1:
            nav_line += f"‚¨ÖÔ∏è `/lights {page - 1}` | "
        nav_line += f"üìÑ {page}/{total_pages}"
        if page < total_pages:
            nav_line += f" | `/lights {page + 1}` ‚û°Ô∏è"
        
        message += f"\n{nav_line}\n\n"
        message += f"–í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(lights_data)}\n\n"
        message += "_–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:_\n"
        message += "`/light_on entity_id` - –≤–∫–ª—é—á–∏—Ç—å\n"
        message += "`/light_off entity_id` - –≤—ã–∫–ª—é—á–∏—Ç—å"
        
        await loading_msg.edit_text(message, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Lights command error: {e}")
        error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤–µ—Ç–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.\n\n"
        if "parse entities" in str(e).lower():
            error_msg += "–í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –æ—Ç Home Assistant —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—à–∏–±–∫–∏.\n"
        error_msg += f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {str(e)[:100]}..."
        await update.message.reply_text(error_msg)

async def light_on(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Turn on a light."""
    if not context.args:
        await update.message.reply_text("‚ùå Please specify a light entity ID.\nExample: `/light_on light.kitchen`", parse_mode='Markdown')
        return
    
    entity_id = context.args[0]
    try:
        result = ha_api.turn_on_light(entity_id)
        if result:
            await update.message.reply_text(f"‚úÖ Light `{entity_id}` turned on", parse_mode='Markdown')
        else:
            await update.message.reply_text(f"‚ùå Failed to turn on light `{entity_id}`", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Light on command error: {e}")
        await update.message.reply_text(f"‚ùå Error controlling light: {str(e)}")

async def light_off(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Turn off a light."""
    if not context.args:
        await update.message.reply_text("‚ùå Please specify a light entity ID.\nExample: `/light_off light.kitchen`", parse_mode='Markdown')
        return
    
    entity_id = context.args[0]
    try:
        result = ha_api.turn_off_light(entity_id)
        if result:
            await update.message.reply_text(f"‚úÖ Light `{entity_id}` turned off", parse_mode='Markdown')
        else:
            await update.message.reply_text(f"‚ùå Failed to turn off light `{entity_id}`", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Light off command error: {e}")
        await update.message.reply_text(f"‚ùå Error controlling light: {str(e)}")

async def switches(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """List all switches and their states with pagination."""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        page = 1
        if context.args and context.args[0].isdigit():
            page = max(1, int(context.args[0]))
        
        loading_msg = await update.message.reply_text("üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è—Ö...")
        
        switches_data = ha_api.get_switches()
        if not switches_data:
            await loading_msg.edit_text("üîå –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Home Assistant.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        per_page = 8
        total_pages = (len(switches_data) + per_page - 1) // per_page
        page = min(page, total_pages)
        
        start_idx = (page - 1) * per_page
        end_idx = start_idx + per_page
        page_switches = switches_data[start_idx:end_idx]
        
        message = f"üîå *–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏* (—Å—Ç—Ä. {page}/{total_pages}):\n\n"
        
        for switch in page_switches:
            state_emoji = "üü¢" if switch['state'] == 'on' else "üî¥"
            if switch['state'] == 'unavailable':
                state_emoji = "‚ö´"
            
            friendly_name = switch['friendly_name']
            if len(friendly_name) > 25:
                friendly_name = friendly_name[:22] + "..."
            
            message += f"{state_emoji} {friendly_name}\n"
            message += f"   `{switch['entity_id']}`\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        nav_line = ""
        if page > 1:
            nav_line += f"‚¨ÖÔ∏è `/switches {page - 1}` | "
        nav_line += f"üìÑ {page}/{total_pages}"
        if page < total_pages:
            nav_line += f" | `/switches {page + 1}` ‚û°Ô∏è"
        
        message += f"\n{nav_line}\n\n"
        message += f"–í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(switches_data)}\n\n"
        message += "_–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:_\n"
        message += "`/switch_on entity_id` - –≤–∫–ª—é—á–∏—Ç—å\n"
        message += "`/switch_off entity_id` - –≤—ã–∫–ª—é—á–∏—Ç—å"
        
        await loading_msg.edit_text(message, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Switches command error: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π: {str(e)}")

async def switch_on(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Turn on a switch."""
    if not context.args:
        await update.message.reply_text("‚ùå Please specify a switch entity ID.\nExample: `/switch_on switch.garden`", parse_mode='Markdown')
        return
    
    entity_id = context.args[0]
    try:
        result = ha_api.turn_on_switch(entity_id)
        if result:
            await update.message.reply_text(f"‚úÖ Switch `{entity_id}` turned on", parse_mode='Markdown')
        else:
            await update.message.reply_text(f"‚ùå Failed to turn on switch `{entity_id}`", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Switch on command error: {e}")
        await update.message.reply_text(f"‚ùå Error controlling switch: {str(e)}")

async def switch_off(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Turn off a switch."""
    if not context.args:
        await update.message.reply_text("‚ùå Please specify a switch entity ID.\nExample: `/switch_off switch.garden`", parse_mode='Markdown')
        return
    
    entity_id = context.args[0]
    try:
        result = ha_api.turn_off_switch(entity_id)
        if result:
            await update.message.reply_text(f"‚úÖ Switch `{entity_id}` turned off", parse_mode='Markdown')
        else:
            await update.message.reply_text(f"‚ùå Failed to turn off switch `{entity_id}`", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Switch off command error: {e}")
        await update.message.reply_text(f"‚ùå Error controlling switch: {str(e)}")

async def sensors(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """List sensor readings with pagination."""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        page = 1
        if context.args and context.args[0].isdigit():
            page = max(1, int(context.args[0]))
        
        loading_msg = await update.message.reply_text("üîÑ –ü–æ–ª—É—á–∞—é –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤...")
        
        sensors_data = ha_api.get_sensors()
        if not sensors_data:
            await loading_msg.edit_text("üì° –î–∞—Ç—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Home Assistant.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        per_page = 6  # –ú–µ–Ω—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∞—Ç—á–∏–∫–æ–≤ (–±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
        total_pages = (len(sensors_data) + per_page - 1) // per_page
        page = min(page, total_pages)
        
        start_idx = (page - 1) * per_page
        end_idx = start_idx + per_page
        page_sensors = sensors_data[start_idx:end_idx]
        
        message = f"üì° *–ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤* (—Å—Ç—Ä. {page}/{total_pages}):\n\n"
        
        for sensor in page_sensors:
            friendly_name = sensor['friendly_name']
            if len(friendly_name) > 25:
                friendly_name = friendly_name[:22] + "..."
            
            state = sensor['state']
            unit = sensor.get('unit', '')
            
            # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if len(str(state)) > 15:
                state = str(state)[:12] + "..."
            
            message += f"üìä {friendly_name}\n"
            message += f"   `{sensor['entity_id']}`\n"
            message += f"   üìà {state} {unit}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        nav_line = ""
        if page > 1:
            nav_line += f"‚¨ÖÔ∏è `/sensors {page - 1}` | "
        nav_line += f"üìÑ {page}/{total_pages}"
        if page < total_pages:
            nav_line += f" | `/sensors {page + 1}` ‚û°Ô∏è"
        
        message += f"\n{nav_line}\n\n"
        message += f"–í—Å–µ–≥–æ –¥–∞—Ç—á–∏–∫–æ–≤: {len(sensors_data)}"
        
        await loading_msg.edit_text(message, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Sensors command error: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç—á–∏–∫–æ–≤: {str(e)}")

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle unknown commands."""
    await update.message.reply_text(
        "‚ùì Unknown command. Use /help to see available commands."
    )

def start_bot():
    """Start the Telegram bot."""
    # Get bot token from environment
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        logger.error("TELEGRAM_BOT_TOKEN environment variable not set")
        return
    
    # Create the Application
    application = Application.builder().token(bot_token).build()
    
    # Register command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("lights", lights))
    application.add_handler(CommandHandler("light_on", light_on))
    application.add_handler(CommandHandler("light_off", light_off))
    application.add_handler(CommandHandler("switches", switches))
    application.add_handler(CommandHandler("switch_on", switch_on))
    application.add_handler(CommandHandler("switch_off", switch_off))
    application.add_handler(CommandHandler("sensors", sensors))
    
    # Handle unknown commands
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))
    
    # Start the bot
    logger.info("Starting Telegram bot...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    start_bot()
