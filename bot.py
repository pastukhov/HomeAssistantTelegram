import os
import logging

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from home_assistant import HomeAssistantAPI

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Initialize Home Assistant API
ha_api = HomeAssistantAPI()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /start is issued."""
    welcome_message = """
üè† *Home Assistant Telegram Bot*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ Home Assistant —á–µ—Ä–µ–∑ Telegram.

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/sensors - –ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤

üí° *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ–º:*
/lights - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤
/light\_on <entity\_id> - –í–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç
/light\_off <entity\_id> - –í—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç

üîå *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—è–º–∏:*
/switches - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π
/switch\_on <entity\_id> - –í–∫–ª—é—á–∏—Ç—å –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å
/switch\_off <entity\_id> - –í—ã–∫–ª—é—á–∏—Ç—å –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å

*–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
`/light_on light.kitchen`
`/switch_off switch.garden_lights`

üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /lights –∏–ª–∏ /switches —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    """
    await update.message.reply_text(welcome_message, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    help_text = """
ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º Home Assistant Bot*

üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:*
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã Home Assistant
/sensors - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤

üí° *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ–º:*
/lights - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤ –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ
/light\_on <entity\_id> - –í–∫–ª—é—á–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫
/light\_off <entity\_id> - –í—ã–∫–ª—é—á–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫

üîå *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—è–º–∏:*
/switches - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ
/switch\_on <entity\_id> - –í–∫–ª—é—á–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å
/switch\_off <entity\_id> - –í—ã–∫–ª—é—á–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å

*–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
`/light_on light.kitchen` - –≤–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç –Ω–∞ –∫—É—Ö–Ω–µ
`/switch_off switch.garden_lights` - –≤—ã–∫–ª—é—á–∏—Ç—å —Å–∞–¥–æ–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ

üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /lights –∏–ª–∏ /switches —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –∏—Ö entity\_id
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show Home Assistant status."""
    try:
        states = ha_api.get_all_states()
        if states:
            lights_count = len([s for s in states if s.get('entity_id', '').startswith('light.')])
            switches_count = len([s for s in states if s.get('entity_id', '').startswith('switch.')])
            sensors_count = len([s for s in states if s.get('entity_id', '').startswith('sensor.')])
            
            status_message = f"""
üè† *Home Assistant Status*

‚úÖ Connected and operational
üìä Total entities: {len(states)}
üí° Lights: {lights_count}
üîå Switches: {switches_count}
üì° Sensors: {sensors_count}

üïê Last updated: {ha_api.get_current_time()}
            """
        else:
            status_message = "‚ùå Unable to connect to Home Assistant"
        
        await update.message.reply_text(status_message, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Status command error: {e}")
        await update.message.reply_text(f"‚ùå Error getting status: {str(e)}")

async def lights(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """List all lights and their states."""
    try:
        lights_data = ha_api.get_lights()
        if not lights_data:
            await update.message.reply_text("üí° No lights found or unable to connect to Home Assistant")
            return
        
        message = "üí° *Lights Status:*\n\n"
        for light in lights_data[:15]:  # Limit to 15 lights to avoid message length issues
            state_emoji = "üü¢" if light['state'] == 'on' else "üî¥"
            message += f"{state_emoji} `{light['entity_id']}`\n"
            message += f"   üìù {light['friendly_name']}\n"
            message += f"   üîß State: {light['state']}\n\n"
        
        if len(lights_data) > 15:
            message += f"... and {len(lights_data) - 15} more lights"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Lights command error: {e}")
        await update.message.reply_text(f"‚ùå Error getting lights: {str(e)}")

async def light_on(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Turn on a light."""
    if not context.args:
        await update.message.reply_text("‚ùå Please specify a light entity ID.\nExample: `/light_on light.kitchen`", parse_mode='Markdown')
        return
    
    entity_id = context.args[0]
    try:
        result = ha_api.turn_on_light(entity_id)
        if result:
            await update.message.reply_text(f"‚úÖ Light `{entity_id}` turned on", parse_mode='Markdown')
        else:
            await update.message.reply_text(f"‚ùå Failed to turn on light `{entity_id}`", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Light on command error: {e}")
        await update.message.reply_text(f"‚ùå Error controlling light: {str(e)}")

async def light_off(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Turn off a light."""
    if not context.args:
        await update.message.reply_text("‚ùå Please specify a light entity ID.\nExample: `/light_off light.kitchen`", parse_mode='Markdown')
        return
    
    entity_id = context.args[0]
    try:
        result = ha_api.turn_off_light(entity_id)
        if result:
            await update.message.reply_text(f"‚úÖ Light `{entity_id}` turned off", parse_mode='Markdown')
        else:
            await update.message.reply_text(f"‚ùå Failed to turn off light `{entity_id}`", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Light off command error: {e}")
        await update.message.reply_text(f"‚ùå Error controlling light: {str(e)}")

async def switches(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """List all switches and their states."""
    try:
        switches_data = ha_api.get_switches()
        if not switches_data:
            await update.message.reply_text("üîå No switches found or unable to connect to Home Assistant")
            return
        
        message = "üîå *Switches Status:*\n\n"
        for switch in switches_data[:15]:  # Limit to 15 switches
            state_emoji = "üü¢" if switch['state'] == 'on' else "üî¥"
            message += f"{state_emoji} `{switch['entity_id']}`\n"
            message += f"   üìù {switch['friendly_name']}\n"
            message += f"   üîß State: {switch['state']}\n\n"
        
        if len(switches_data) > 15:
            message += f"... and {len(switches_data) - 15} more switches"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Switches command error: {e}")
        await update.message.reply_text(f"‚ùå Error getting switches: {str(e)}")

async def switch_on(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Turn on a switch."""
    if not context.args:
        await update.message.reply_text("‚ùå Please specify a switch entity ID.\nExample: `/switch_on switch.garden`", parse_mode='Markdown')
        return
    
    entity_id = context.args[0]
    try:
        result = ha_api.turn_on_switch(entity_id)
        if result:
            await update.message.reply_text(f"‚úÖ Switch `{entity_id}` turned on", parse_mode='Markdown')
        else:
            await update.message.reply_text(f"‚ùå Failed to turn on switch `{entity_id}`", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Switch on command error: {e}")
        await update.message.reply_text(f"‚ùå Error controlling switch: {str(e)}")

async def switch_off(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Turn off a switch."""
    if not context.args:
        await update.message.reply_text("‚ùå Please specify a switch entity ID.\nExample: `/switch_off switch.garden`", parse_mode='Markdown')
        return
    
    entity_id = context.args[0]
    try:
        result = ha_api.turn_off_switch(entity_id)
        if result:
            await update.message.reply_text(f"‚úÖ Switch `{entity_id}` turned off", parse_mode='Markdown')
        else:
            await update.message.reply_text(f"‚ùå Failed to turn off switch `{entity_id}`", parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Switch off command error: {e}")
        await update.message.reply_text(f"‚ùå Error controlling switch: {str(e)}")

async def sensors(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """List sensor readings."""
    try:
        sensors_data = ha_api.get_sensors()
        if not sensors_data:
            await update.message.reply_text("üì° No sensors found or unable to connect to Home Assistant")
            return
        
        message = "üì° *Sensor Readings:*\n\n"
        for sensor in sensors_data[:10]:  # Limit to 10 sensors
            message += f"üìä `{sensor['entity_id']}`\n"
            message += f"   üìù {sensor['friendly_name']}\n"
            message += f"   üìà Value: {sensor['state']} {sensor.get('unit', '')}\n\n"
        
        if len(sensors_data) > 10:
            message += f"... and {len(sensors_data) - 10} more sensors"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Sensors command error: {e}")
        await update.message.reply_text(f"‚ùå Error getting sensors: {str(e)}")

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle unknown commands."""
    await update.message.reply_text(
        "‚ùì Unknown command. Use /help to see available commands."
    )

def start_bot():
    """Start the Telegram bot."""
    # Get bot token from environment
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        logger.error("TELEGRAM_BOT_TOKEN environment variable not set")
        return
    
    # Create the Application
    application = Application.builder().token(bot_token).build()
    
    # Register command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("lights", lights))
    application.add_handler(CommandHandler("light_on", light_on))
    application.add_handler(CommandHandler("light_off", light_off))
    application.add_handler(CommandHandler("switches", switches))
    application.add_handler(CommandHandler("switch_on", switch_on))
    application.add_handler(CommandHandler("switch_off", switch_off))
    application.add_handler(CommandHandler("sensors", sensors))
    
    # Handle unknown commands
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))
    
    # Start the bot
    logger.info("Starting Telegram bot...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    start_bot()
