version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ha_telegram_db
    environment:
      POSTGRES_DB: ha_telegram_bot
      POSTGRES_USER: ha_bot_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ha_bot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ha_bot_user -d ha_telegram_bot"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Home Assistant Telegram Bot
  ha_telegram_bot:
    build: .
    container_name: ha_telegram_bot_app
    environment:
      # Database configuration
      DATABASE_URL: postgresql://ha_bot_user:${DB_PASSWORD:-secure_password_123}@postgres:5432/ha_telegram_bot
      
      # Home Assistant configuration
      HOME_ASSISTANT_URL: ${HOME_ASSISTANT_URL}
      HOME_ASSISTANT_TOKEN: ${HOME_ASSISTANT_TOKEN}
      
      # Telegram Bot configuration
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      
      # Flask configuration
      SESSION_SECRET: ${SESSION_SECRET}
      FLASK_ENV: production
      
      # Logging configuration
      PYTHONUNBUFFERED: 1
    ports:
      - "5000:5000"
    volumes:
      - ./logs:/app/logs
    networks:
      - ha_bot_network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: ha_telegram_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - ha_bot_network
    depends_on:
      - ha_telegram_bot
    restart: unless-stopped
    profiles:
      - with-nginx

volumes:
  postgres_data:

networks:
  ha_bot_network:
    driver: bridge