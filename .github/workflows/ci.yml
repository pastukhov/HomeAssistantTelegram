name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --frozen
        uv pip install pytest pytest-cov pytest-mock pytest-asyncio coverage

    - name: Set environment variables for tests
      run: |
        echo "HOME_ASSISTANT_URL=http://test-ha.local:8123" >> $GITHUB_ENV
        echo "HOME_ASSISTANT_TOKEN=test_token_123" >> $GITHUB_ENV
        echo "TELEGRAM_BOT_TOKEN=test_bot_token_456" >> $GITHUB_ENV
        echo "SESSION_SECRET=test_secret_key" >> $GITHUB_ENV

    - name: Run linting
      run: |
        uv run python -m py_compile *.py
        uv run python -c "import ast; [ast.parse(open(f).read()) for f in ['app.py', 'bot.py', 'home_assistant.py', 'metrics.py', 'main.py']]"

    - name: Run tests with coverage
      run: |
        uv run pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing --verbose

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

    - name: Generate coverage badge
      run: |
        COVERAGE=$(python -c "import xml.etree.ElementTree as ET; root = ET.parse('coverage.xml').getroot(); print(f\"{float(root.attrib['line-rate']) * 100:.1f}\")")
        echo "Coverage: ${COVERAGE}%"
        echo "COVERAGE=${COVERAGE}" >> $GITHUB_ENV

  docker-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t ha-telegram-bot:test .

    - name: Test Docker image
      run: |
        docker run --rm --name test-container \
          -e HOME_ASSISTANT_URL=http://test-ha.local:8123 \
          -e HOME_ASSISTANT_TOKEN=test_token \
          -e TELEGRAM_BOT_TOKEN=test_bot_token \
          -e SESSION_SECRET=test_secret \
          -p 5000:5000 \
          -d ha-telegram-bot:test

        # Wait for container to start
        sleep 10

        # Check if container is running
        docker ps | grep test-container

        # Cleanup
        docker stop test-container

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'
      continue-on-error: true

    - name: Check for security vulnerabilities
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install linting tools
      run: |
        pip install flake8 black isort

    - name: Run black formatter check
      run: |
        black --check --diff .

    - name: Run isort import check
      run: |
        isort --check-only --diff .

    - name: Run flake8 linter
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics